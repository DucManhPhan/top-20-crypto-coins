name: Integration Tests

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: string
      resources-deployed:
        description: 'Whether resources are deployed'
        required: false
        default: 'true'
        type: string

env:
  AWS_REGION: ap-southeast-1

jobs:
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    environment: production
    if: ${{ inputs.resources-deployed == 'true' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set Environment Variables
      run: |
        ENV="${{ inputs.environment || 'production' }}"
        echo "TEST_ENV=$ENV" >> $GITHUB_ENV
        echo "Testing environment: $ENV"

    - name: Test Lambda Function
      run: |
        echo "Testing Lambda function invocation..."
        aws lambda invoke \
          --function-name top_20_crypto_coins:live \
          --payload '{}' \
          response.json
        
        cat response.json
        
        # Check if response contains success status
        if grep -q '"statusCode": 200' response.json; then
          echo "✅ Lambda function executed successfully"
        else
          echo "❌ Lambda function failed"
          exit 1
        fi

    - name: Verify DynamoDB Data
      run: |
        TABLE_NAME="prod-crypto-coins"
        echo "Checking DynamoDB table: $TABLE_NAME"
        ITEM_COUNT=$(aws dynamodb scan --table-name "$TABLE_NAME" --select COUNT --output text --query 'Count')
        echo "Items in DynamoDB: $ITEM_COUNT"
        
        if [ "$ITEM_COUNT" -gt 0 ]; then
          echo "✅ Data found in DynamoDB table"
        else
          echo "⚠️ No data found in DynamoDB table"
        fi

    - name: Test Secrets Manager
      run: |
        SECRET_NAME="prod-cmc-api-key"
        echo "Testing Secrets Manager access: $SECRET_NAME"
        SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query 'SecretString' --output text)
        
        if [ -n "$SECRET_VALUE" ] && [ "$SECRET_VALUE" != "null" ]; then
          echo "✅ Secret retrieved successfully"
        else
          echo "❌ Failed to retrieve secret"
          exit 1
        fi